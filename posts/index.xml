<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Scripto Blog</title><link>https://scripto1.github.io/myblog2/posts/</link><description>Recent content in Posts on Scripto Blog</description><generator>Hugo -- 0.138.0</generator><language>en-us</language><lastBuildDate>Wed, 13 Nov 2024 12:58:43 +0900</lastBuildDate><atom:link href="https://scripto1.github.io/myblog2/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>ep4. frequency counter</title><link>https://scripto1.github.io/myblog2/posts/ep4/</link><pubDate>Wed, 13 Nov 2024 12:58:43 +0900</pubDate><guid>https://scripto1.github.io/myblog2/posts/ep4/</guid><description>&lt;h2 id="frequence-counter">frequence counter&lt;/h2>
&lt;p>주말에 조금 쉬었더니 매일 공부하기로 했던 굳은 다짐이 느슨해지려고 한다. ㅠ 자, 다시 불태워보자.
알고리즘 문제를 해결하는 여러 가지 패턴 중에 frequency counter가 있다. 두 개의 배열이나 문자열을 새로운 {키: 값}으로 담고 해당 키나 값의 개수를 찾아 비교하는 방법이다. 예시로 애너그램(anagram: 동일한 단어의 순서를 바꾸어 다른 의미의 단어를 만드는 방법)을 확인하는 문제를 풀어봤다.&lt;/p>
&lt;pre>&lt;code>function validAnagram(str1, str2) {
if (str1.length !== str2.length) {
return false;
}
&lt;/code>&lt;/pre>
&lt;p>먼저 두 단어의 길이가 같지 않으면 애너그램 형식에 어긋나기 때문에 거짓이다.&lt;/p></description></item><item><title>🔍 ep3. 알고리즘(algorithm)이란 무엇인가?</title><link>https://scripto1.github.io/myblog2/posts/ep3/</link><pubDate>Wed, 13 Nov 2024 12:44:33 +0900</pubDate><guid>https://scripto1.github.io/myblog2/posts/ep3/</guid><description>&lt;h2 id="알고리즘algorithm이란-무엇인가">알고리즘(algorithm)이란 무엇인가?&lt;/h2>
&lt;p>알고리즘은 특정 일을 처리하기 위한 일련의 과정이다. 컴퓨터 공학 관점에서는 데이터를 처리하기 위한 공정이지만 일반적으로는 내가 본 유튜브 영상과 관련된 영상을 추천해 주거나 내가 주문한 상품과 유사한 상품을 구매하라고 부추기는 소비 전략으로 알려진 듯하다.&lt;/p>
&lt;p>여기서는 컴퓨터 공학 관점에서 문제를 어떻게 해결할지 공부하려고 한다. (아래 내용은 Colt Steele의 알고리즘 강의를 보면서 요약한 내용이다.)&lt;/p>
&lt;ol>
&lt;li>주어진 문제를 나만의 문장으로 재정의하고 문제가 제공하는 input과 output 등 정보가 충분한지 판단한다.&lt;/li>
&lt;li>문제를 쉽게 이해할 수 있도록 간단한 input과 output으로 예시를 만들어보고, 가능하다면 더 복잡한 예시나 잘못된 input을 대입해 본다.&lt;/li>
&lt;li>해결 방법을 여러 단계로 나누어 설명하거나 적는다.&lt;/li>
&lt;li>문제가 어려우면 문제를 단순화해서 풀어보고, 답이 나온다면 어려운 부분에 대입해 본다.&lt;/li>
&lt;li>문제를 푼 후에 회고와 리팩토링을 해본다. 다른 방법으로 해답을 찾을 수 있는지, 다른 문제에도 적용할 수 있는지, 속도나 메모리 사용을 최적화할 수 있는지를 검토한다.&lt;/li>
&lt;/ol>
&lt;p>문제를 풀다 보니 객체 프로퍼티 값을 가져오는 방법이 두 가지인 걸 알게 되었다. 그래서 객체 프로퍼티 값에 접근할 때 사용하는 점 표기법(dot notation)과 대괄호 표기법(square bracket notation)의 차이를 알아봤다.&lt;/p></description></item><item><title>⚖️ ep.2 object와 array 비교</title><link>https://scripto1.github.io/myblog2/posts/ep2/</link><pubDate>Tue, 12 Nov 2024 14:40:04 +0900</pubDate><guid>https://scripto1.github.io/myblog2/posts/ep2/</guid><description>&lt;h2 id="object와-array-비교">object와 array 비교&lt;/h2>
&lt;p>이번에는 Big O 관점에서 객체(object)와 배열(array)이 어떤 장단점을 가졌는지 살펴보자.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>객체(object)&lt;/strong>&lt;br>
키(key)와 값(value)으로 짝을 이루는 객체는 특정 순서가 없기 때문에 손쉽게 프로퍼티를 추가하거나 삭제할 수 있는 장점이 있다. 따라서 아래 표와 같이 검색을 제외한 대부분 경우 작업이 간단하다. -&amp;gt; O(1). 객체의 특정 프로퍼티를 검색할 때는 객체 안 프로퍼티를 처음부터 하나씩 확인해야 해서 프로퍼티 수(n)에 비례해서 작업 시간도 늘어난다. -&amp;gt; O(n).&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;ol start="2">
&lt;li>&lt;strong>배열(array)&lt;/strong>&lt;br>
자료에 순서가 필요할 때는 배열을 사용한다. 배열 안 특정 요소에 접근하기는 수월하지만, 요소를 추가하거나 제거할 때는 상황에 따라 다르다. 배열 마지막에 요소를 추가(push)하거나 제거(pop)하는 자바스크립트 메서드는 한번만 동작하면 된다. -&amp;gt; O(1). 반면에 요소를 배열 앞에 추가(unshift)하거나 제거(shift)하면 나머지 요소의 순서를 재배열해야 해서 요소의 양과 맞물려 작업량이 늘어난다. -&amp;gt; O(n).
처음 React 프로젝트를 하면서 배열로 만든 데이터를 필요한 곳에 가져오지 못해서 고생한 적이 있었다. 데이터 형식을 객체로 바꾸면 순서와 상관없이 프로퍼티를 쉽게 가져올 수 있다는 부트캠프 동기의 조언을 듣고 문제를 해결했던 기억이 떠오른다. 지금 생각해 보면 부끄럽지만 그 당시에는 배열과 객체를 어떻게 사용해야 하는지 전혀 감을 잡지 못했다. 세상 낯설었던 코드가 조금은 친숙해진 걸 보면 그래도 과거의 나보단 나아진 것 같아 살짝 어깨가 올라간다.&lt;/li>
&lt;/ol></description></item><item><title>💡 ep.1 자료구조와 알고리즘</title><link>https://scripto1.github.io/myblog2/posts/ep1/</link><pubDate>Tue, 12 Nov 2024 12:25:11 +0900</pubDate><guid>https://scripto1.github.io/myblog2/posts/ep1/</guid><description>&lt;h2 id="자료구조와-알고리즘">자료구조와 알고리즘&lt;/h2>
&lt;p>자료구조와 알고리즘을 공부하다 보면 가장 처음에 마주하는 개념이 바로 Big O 표기법이다.&lt;br>
요약하자면 내가 만든 코드(알고리즘)가 얼마나 효율적으로 작동하는지 계산하는 방법이다. 같은 문제를 다양한 방법으로 풀었을 때 득과 실을 따져볼 수 있고, 코드를 실행했을 때 걸리는 시간과 소모하는 공간(메모리)을 비교해서 비효율적인 코드를 찾아낼 수 있다. 결국 특정 해법에 가장 알맞은 알고리즘을 찾아내서 프로그램 성능을 개선할 수 있다는 얘기다.&lt;/p>
&lt;p>물론 여기에는 동일한 기계에서 작동한다는 전제가 있고, 속도, 메모리 사용, 코드의 가독성 등 여러 변수가 존재하기 때문에 정답이 한 개라고 주장하기 어렵다. 똑똑한 사람들이 이미 아래 차트와 같이 각 알고리즘에 가장 적합한 풀이 방식을 잘 정리해 놨으니 감사한 마음으로 소비하면 될 것 같다. 차트에서도 볼 수 있듯이 O(1), O(n) 영역에 내 알고리즘 해법이 위치하면 일단 혼날 일은 없지 않을까 한다.&lt;/p></description></item></channel></rss>